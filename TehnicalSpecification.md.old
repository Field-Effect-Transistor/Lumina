# Технічне завдання

1. Назва проєкту: Lumina
2. Опис проєкту: Програма для безпечного віддаленого доступу до комп’ютера з використанням VPN-з’єднання.
3. Мета проєкту: Розробити програму, яка забезпечить створення безпечної віртуальної приватної мережі (VPN)для організації віддаленого доступу до пристроїв через OpenVPN. Додатково реалізувати функціонал доступу до зображення екрану, маніпуляцій курсором, терміналу та управління правами доступу в межах створених груп користувачів.
4. Мова розробки: C++ / Shell
5. Структура системи:
    1. Серверна частина
        * Запуск та налаштування OpenVPN-сервера.
            * Написання власних скриптів для шводкої розгортки та адміністрування OpenVPN сервера, CA-машини та "груп".
            * Використання `client-config-dir` (CCD) для призначення статичних IP-адрес клієнтам.
            * Топологія OpenVPN: `subnet`.
            * Налаштування `crl-verify` для використання списку відкликаних сертифікатів (CRL).
        * Створення конфігурацій клієнтів.
            * Генерація унікальних сертифікатів та ключів для кожного клієнта на стороні сервера для спрощення роботи.
            * Надання клієнтам `.ovpn` файлів з вбудованими сертифікатами та ключами.
        * Адміністрування користувачів (групи, ролі).
            * Реєстрація користувачів у системі (email, пароль) з підтвердженням по email (використання `libcurl` для відправки листів, генерація унікальних токенів підтвердження).
            * Авторизація користувачів (довготривалі refresh-токени та короткотривалі access-токени).
            * Безпечне зберігання паролів (хешування з сіллю, наприклад, `bcrypt`, `scrypt`, `Argon2`).
            * Зберігання інформації про користувачів, групи, ролі та токени в базі даних (SQLite)
        * Управління сесіями (ініціалізація, завершення, підключення observer'ів).
            * TODO
        * Передача даних між учасниками (контроль сесій master-slave-observer).
            * TODO
        * Обробка запитів на віддалений доступ.
            * Динамічне управління правилами брандмауера (`iptables` з використанням `ipset`) на сервері для контролю комунікації між клієнтами:
                * За замовчуванням вся маршрутизація між користувачами заборонена (політика `FORWARD DROP`).
                * Дозволений зв'язок між адміністраторами (з `ADMIN_GROUP`) та будь-якими користувачами за ініціативи адміністратора.
                * Дозволена комунікація між користувачами всередині однієї визначеної групи (наприклад, `GROUP1_IPS`), але не між різними групами.
    2. Клієнтська частина
        * Ініціалізація VPN-з'єднання з сервером.
            * Безпечне з'єднання (TLS, наприклад, через `QSslSocket` в Qt) з сигнальним сервером для отримання `.ovpn` конфігурації та інших даних до встановлення VPN.
            * Інтерфейс для введення логіна/пароля, реєстрації.
        * Відображення інформації про поточну сесію.
        * Запити на підключення до іншого користувача.
        * Погодження/відхилення запитів.
        * Залежно від ролі:
            * Master: отримання відео, передача команд курсору/введення.
            * Slave: передача зображення екрану, виконання введених команд.
                * Захоплення екрану (`FFmpeg`/`OpenCV`/платформо-специфічні API).
                * Кодування відео в реальному часі (наприклад, H.264, VP9; розгляд апаратного кодування).
                * Передача відеопотоку (наприклад, через RTP поверх UDP всередині VPN).
            * Observer: лише отримання зображення.
        * Доступ до консолі/терміналу (при наданні дозволу).
6. Ролі користувачів:
    * Master – має повний контроль над віддаленим пристроєм.
    * Slave – пристрій, який надає доступ.
    * Observer – користувач, що лише спостерігає за сеансом.
7. Основні функції:
    1. Створення VPN-групи
        * Користувач створює групу, додає інших користувачів. (надалі цей користувач є адміністратором групи)
        * Призначає ролі.
    2. Підключення до VPN
        * Автоматичне отримання конфігурації з сервера.
        * Встановлення vpn тунелю.
    3. Запуск сесії віддаленого доступу
        * Запит від Master до Slave.
        * Погодження з боку Slave.
        * Запрошення Observer'ів до сесії (з боку Master).
    4. Робота сесії:
        * Передача відео, введення, курсору.
        * Робота з терміналом
            * Передача текстових команд та отримання результату (аналог SSH).
            * Може бути окремий режим роботи (без відео/GUI).
8. Нефункціональні вимоги:
    1. Захищена передача даних (шифрування через OpenVPN). Додатково TLS для каналу управління до встановлення VPN.
    2. Сумісність з Windows/Linux. (Надання переваги Linux-користувачам)
    3. Можливість масштабування (додавання нових груп, користувачів).
    4. Мінімальний інтерфейс (CLI або базовий GUI).
        * TODO
    5. TCP/IP протокол взаємодії
9. Інструменти та бібліотеки:
    1. OpenVPN – основа VPN-з’єднання.
    2. Boost.Asio – для реалізації мережевих з'єднань на сервері (включаючи TLS для каналу управління до встановлення VPN).
        * Реєстрація / авторизація у застосунку (серверна логіка).
        * Канал управління між клієнтом та сервером (серверна частина).
    3. FFmpeg / OpenCV – для обробки відео потоку (екран).
    4. X11 / WinAPI – для взаємодії з курсором/введенням.
    5. CMake – збірка проєкту (ієрархічна структура CMakeLists.txt для окремої збірки, інсталяції та видалення компонентів (сервер/клієнт)).
    6. Ninja – білд проєкту.
    7. Qt (Qt6) – для візуальної частини клієнта (включаючи `QtNetwork` з `QSslSocket` для TLS-з'єднань з сигнальним сервером).
    8. `ipset` та `iptables` - для гнучкого управління доступом між VPN-клієнтами на сервері.
    9. `libcurl` - для відправки email-підтверджень з сервера.
    10.База даних (`SQLite`) - для зберігання даних користувачів, груп, токенів.
10. Очікуваний результат -- програма, яка дозволяє:
    1. Створити VPN-групу.
    2. Підключити клієнтів через OpenVPN.
    3. Надати доступ одного користувача до іншого згідно з налаштованими правилами доступу та ініціативою адміністратора.
    4. Передавати зображення, керувати пристроєм.
    5. Дозволяти стороннім користувачам спостерігати за сеансом.
    6. Використовувати термінал з віддаленого пристрою.
